"""
GenX: An Configurable Capacity Expansion Model
Copyright (C) 2021,  Massachusetts Institute of Technology
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
A complete copy of the GNU General Public License v2 (GPLv2) is available
in LICENSE.txt.  Users uncompressing this from an archive may not have
received this license file.  If not, see <http://www.gnu.org/licenses/>.
"""

@doc raw"""
	write_power(path::AbstractString, inputs::Dict, setup::Dict, EP::Model)

Function for writing the different values of power generated by the different technologies in operation.
"""
function write_power(path::AbstractString, inputs::Dict, setup::Dict, EP::Model)
	dfGen = inputs["dfGen"]
	G = inputs["G"]     # Number of resources (generators, storage, DR, and DERs)
	T = inputs["T"]     # Number of time steps (hours)

	# Power injected by each resource in each time step
	dfPower = DataFrame(Resource = inputs["RESOURCES"], Zone = dfGen[!,:Zone], AnnualSum = Array{Union{Missing,Float64}}(undef, G))
	power = value.(EP[:vP])
	if setup["ParameterScale"] == 1
		power *= ModelScalingFactor
	end
	dfPower.AnnualSum .= power * inputs["omega"]
	dfPower = hcat(dfPower, DataFrame(power, :auto))

	auxNew_Names=[Symbol("Resource");Symbol("Zone");Symbol("AnnualSum");[Symbol("t$t") for t in 1:T]]
	rename!(dfPower,auxNew_Names)

	if setup["VreStor"] == 1
		dfGen_VRE_STOR = inputs["dfGen_VRE_STOR"]
		VRE_STOR = inputs["VRE_STOR"]

		# Create separate csvs for discharge_dc & AC power generation
		dfDischarge_DC = DataFrame(Resource = dfGen_VRE_STOR[!,:technology], Zone = dfGen_VRE_STOR[!,:Zone], AnnualSum = Array{Union{Missing,Float64}}(undef, VRE_STOR))
		power_dc = value.(EP[:vDISCHARGE_DC]) * dfGen_VRE_STOR[!,:EtaInverter]
		if setup["ParameterScale"] == 1
			power_dc *= ModelScalingFactor
		end
		dfDischarge_DC.AnnualSum .= power_dc * inputs["omega"]
		dfDischarge_DC = hcat(dfDischarge_DC, DataFrame(power_dc, :auto))

		auxNew_Names=[Symbol("Resource");Symbol("Zone");Symbol("AnnualSum");[Symbol("t$t") for t in 1:T]]
		rename!(dfDischarge_DC,auxNew_Names)

		total = DataFrame(["Total" 0 sum(dfDischarge_DC[!,:AnnualSum]) fill(0.0, (1,T))], :auto)
		total[:, 4:T+3] .= sum(power_dc, dims = 1)

		rename!(total,auxNew_Names)
		dfDischarge_DC = vcat(dfDischarge_DC, total)
		CSV.write(string(path,sep,"vre_stor_bat_discharge.csv"), dftranspose(dfDischarge_DC, false), writeheader=false)

		dfVP_VRE_STOR = DataFrame(Resource = dfGen_VRE_STOR[!,:technology], Zone = dfGen_VRE_STOR[!,:Zone], AnnualSum = Array{Union{Missing,Float64}}(undef, VRE_STOR))
		power_vre = value.(EP[:vP_VRE_STOR])
		if setup["ParameterScale"] == 1
			power_vre *= ModelScalingFactor
		end
		dfVP_VRE_STOR.AnnualSum .= power_vre * inputs["omega"]
		dfVP_VRE_STOR = hcat(dfVP_VRE_STOR, DataFrame(power_vre, :auto))

		auxNew_Names=[Symbol("Resource");Symbol("Zone");Symbol("AnnualSum");[Symbol("t$t") for t in 1:T]]
		rename!(dfVP_VRE_STOR,auxNew_Names)

		total = DataFrame(["Total" 0 sum(dfVP_VRE_STOR[!,:AnnualSum]) fill(0.0, (1,T))], :auto)
		total[:, 4:T+3] .= sum(power_vre, dims = 1)

		rename!(total,auxNew_Names)
		dfVP_VRE_STOR = vcat(dfVP_VRE_STOR, total)
		CSV.write(string(path,sep,"vre_stor_power.csv"), dftranspose(dfVP_VRE_STOR, false), writeheader=false)

		dfPowerVRESTOR = DataFrame(Resource = dfGen_VRE_STOR[!,:technology], Zone = dfGen_VRE_STOR[!,:Zone], AnnualSum = Array{Union{Missing,Float32}}(undef, VRE_STOR))
		power_vre_stor = value.(EP[:vP_DC]) * dfGen_VRE_STOR[!,:EtaInverter]
		if setup["ParameterScale"] == 1
			power_vre_stor *= ModelScalingFactor
		end
		auxNew_Names=[Symbol("Resource");Symbol("Zone");Symbol("AnnualSum");[Symbol("t$t") for t in 1:T]]
		rename!(dfPowerVRESTOR,auxNew_Names)

		# Concatenate VRE-storage resources to power csv
		dfPower = vcat(dfPower, dfPowerVRESTOR)
	end

	total = DataFrame(["Total" 0 sum(dfPower[!,:AnnualSum]) fill(0.0, (1,T))], :auto)
	total[:, 4:T+3] .= sum(power, dims = 1)  + (setup["VreStor"]==1 ? sum(power_vre_stor) : zeros(1, T)) 

	rename!(total,auxNew_Names)
	dfPower = vcat(dfPower, total)
	CSV.write(joinpath(path, "power.csv"), dftranspose(dfPower, false), writeheader=false)
	return dfPower
end
